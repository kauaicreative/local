Future _searchNearby({double? lat, double? lng}) async {
    double? testLat = lat ?? _latitude;
    double? testLng = lng ?? _longitude;

    if (testLat == null || testLng == null) {
      setState(() {
        _businessInfo =
            "Error: Latitude or longitude is null. $testLat, $testLng";
      });
      return;
    }

    try {
      var headers = {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': dotenv.env['GOOGLE_MAPS_API'] ?? '',
        'X-Goog-FieldMask':
            'places.displayName,places.formattedAddress,places.types,places.websiteUri'
      };
      var request = http.Request('POST',
          Uri.parse('https://places.googleapis.com/v1/places:searchNearby'));

      request.body = json.encode({
        "includedTypes": ["restaurant"],
        "maxResultCount": 1,
        "locationRestriction": {
          "circle": {
            "center": {"latitude": testLat, "longitude": testLng},
            "radius": 500
          }
        }
      });
      request.headers.addAll(headers);

      http.StreamedResponse response = await request.send();

      if (response.statusCode == 200) {
        String result = await response.stream.bytesToString();
        print(result);
        setState(() {
          _businessInfo = result;
        });
      } else {
        String errorMessage =
            "${response.request}\n Error: ${response.statusCode} ${response.reasonPhrase}";
        print(errorMessage);
        setState(() {
          _businessInfo = errorMessage;
        });
      }
    } catch (e) {
      String errorMessage = "An error occurred: $e";
      print(errorMessage);
      setState(() {
        _businessInfo = errorMessage;
      });
    }
  }